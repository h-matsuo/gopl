Go 言語研修 振り返り

MATSUO Hiroyuki
2021/02/05

# Using golang.org/x/tools/present
# See this slide on https://talks.godoc.org/github.com/h-matsuo/gopl/training-reflection/reflection.slide


* はじめに

`talks.godoc.org` で動いている `Present` がかなり古いらしく、
Markdown シンタックスが使えなくて辛い


* "Better C" と捉えた際の強力さが良く分かりました

- *GC*：動的なデータの取り扱いの容易さ
- *並行処理*：新しい実行単位の生成方法の簡潔さ・取り扱いの容易さ …… C: スレッド/プロセス, Go: ゴルーチン
- *並行処理*：実行単位間での通信の容易さ …… C: パイプ, ソケット通信, etc., Go: チャネル
- *リフレクション*

ネイティブ動作しつつも高機能なランタイムの存在が、
高パフォーマンス・安全性・リッチな開発体験を両立させている


* Go 言語の学習を通じて出会った概念

- *defer*：Java や JavaScript を書いていて、ちょうど遅延実行機能を欲していた（Swift にもあるみたい）
- CSP（*チャネル*）
- （Go の）*メソッド*：データ構造（型）の定義と、その操作（メソッド）の定義を上手く分離している。既存の型はそのままに、開発者が自由に操作方法を追加・変更できる柔軟さ


* その他

- パッケージを変数名などで上書きしてしまうことがある

.code override.go /START OMIT/,/END OMIT/

- *練習問題が難しかった*：今までに読んだプログラミング言語の参考書の中でもトップレベルだった。並列処理（8 章）とリフレクション（12 章）はとくに難しかった。VSCode のデバッガ機能めっちゃ便利でした
- *電子書籍（PDF）版が欲しい* です…… 切に願っております：本文の検索がしたい。もし発売されたら買い直します！！


* 今後やりたいこと

- 『プログラミング言語 Go』では触れられていない重要機能・パターンの学習：[[https://golang.org/pkg/context/)][Package context]], [[https://blog.golang.org/context][Go Concurrency Patterns: Context]]
- 他にも、書籍では触れらていない重要パターンがあれば教えてください！


* 半年間ありがとうございました！！
